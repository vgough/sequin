// Code generated by ent, DO NOT EDIT.

package label

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the label type in the database.
	Label = "label"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeOperation holds the string denoting the operation edge name in mutations.
	EdgeOperation = "operation"
	// Table holds the table name of the label in the database.
	Table = "labels"
	// OperationTable is the table that holds the operation relation/edge. The primary key declared below.
	OperationTable = "operation_labels"
	// OperationInverseTable is the table name for the Operation entity.
	// It exists in this package in order to avoid circular dependency with the "operation" package.
	OperationInverseTable = "operations"
)

// Columns holds all SQL columns for label fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldValue,
}

var (
	// OperationPrimaryKey and OperationColumn2 are the table columns denoting the
	// primary key for the operation relation (M2M).
	OperationPrimaryKey = []string{"operation_id", "label_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Label queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByOperationCount orders the results by operation count.
func ByOperationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOperationStep(), opts...)
	}
}

// ByOperation orders the results by operation terms.
func ByOperation(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOperationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOperationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OperationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OperationTable, OperationPrimaryKey...),
	)
}
