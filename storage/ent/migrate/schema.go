// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// LabelsColumns holds the columns for the "labels" table.
	LabelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
	}
	// LabelsTable holds the schema information for the "labels" table.
	LabelsTable = &schema.Table{
		Name:       "labels",
		Columns:    LabelsColumns,
		PrimaryKey: []*schema.Column{LabelsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "label_name_value",
				Unique:  true,
				Columns: []*schema.Column{LabelsColumns[1], LabelsColumns[2]},
			},
		},
	}
	// OperationsColumns holds the columns for the "operations" table.
	OperationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "request_id", Type: field.TypeString},
		{Name: "shard", Type: field.TypeInt64, Default: 0},
		{Name: "detail", Type: field.TypeBytes},
		{Name: "next_check_at", Type: field.TypeTime, Nullable: true},
		{Name: "state", Type: field.TypeBytes, Nullable: true},
		{Name: "result", Type: field.TypeBytes, Nullable: true},
		{Name: "submitter", Type: field.TypeString},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "finished_at", Type: field.TypeTime, Nullable: true},
	}
	// OperationsTable holds the schema information for the "operations" table.
	OperationsTable = &schema.Table{
		Name:       "operations",
		Columns:    OperationsColumns,
		PrimaryKey: []*schema.Column{OperationsColumns[0]},
	}
	// OperationLabelsColumns holds the columns for the "operation_labels" table.
	OperationLabelsColumns = []*schema.Column{
		{Name: "operation_id", Type: field.TypeInt},
		{Name: "label_id", Type: field.TypeInt},
	}
	// OperationLabelsTable holds the schema information for the "operation_labels" table.
	OperationLabelsTable = &schema.Table{
		Name:       "operation_labels",
		Columns:    OperationLabelsColumns,
		PrimaryKey: []*schema.Column{OperationLabelsColumns[0], OperationLabelsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "operation_labels_operation_id",
				Columns:    []*schema.Column{OperationLabelsColumns[0]},
				RefColumns: []*schema.Column{OperationsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "operation_labels_label_id",
				Columns:    []*schema.Column{OperationLabelsColumns[1]},
				RefColumns: []*schema.Column{LabelsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		LabelsTable,
		OperationsTable,
		OperationLabelsTable,
	}
)

func init() {
	OperationLabelsTable.ForeignKeys[0].RefTable = OperationsTable
	OperationLabelsTable.ForeignKeys[1].RefTable = LabelsTable
}
