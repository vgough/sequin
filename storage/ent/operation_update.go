// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vgough/sequin/storage/ent/label"
	"github.com/vgough/sequin/storage/ent/operation"
	"github.com/vgough/sequin/storage/ent/predicate"
)

// OperationUpdate is the builder for updating Operation entities.
type OperationUpdate struct {
	config
	hooks    []Hook
	mutation *OperationMutation
}

// Where appends a list predicates to the OperationUpdate builder.
func (ou *OperationUpdate) Where(ps ...predicate.Operation) *OperationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdateTime sets the "update_time" field.
func (ou *OperationUpdate) SetUpdateTime(t time.Time) *OperationUpdate {
	ou.mutation.SetUpdateTime(t)
	return ou
}

// SetDetail sets the "detail" field.
func (ou *OperationUpdate) SetDetail(b []byte) *OperationUpdate {
	ou.mutation.SetDetail(b)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OperationUpdate) SetStatus(b []byte) *OperationUpdate {
	ou.mutation.SetStatus(b)
	return ou
}

// SetIsDone sets the "is_done" field.
func (ou *OperationUpdate) SetIsDone(b bool) *OperationUpdate {
	ou.mutation.SetIsDone(b)
	return ou
}

// SetNillableIsDone sets the "is_done" field if the given value is not nil.
func (ou *OperationUpdate) SetNillableIsDone(b *bool) *OperationUpdate {
	if b != nil {
		ou.SetIsDone(*b)
	}
	return ou
}

// AddLabelIDs adds the "labels" edge to the Label entity by IDs.
func (ou *OperationUpdate) AddLabelIDs(ids ...int) *OperationUpdate {
	ou.mutation.AddLabelIDs(ids...)
	return ou
}

// AddLabels adds the "labels" edges to the Label entity.
func (ou *OperationUpdate) AddLabels(l ...*Label) *OperationUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ou.AddLabelIDs(ids...)
}

// Mutation returns the OperationMutation object of the builder.
func (ou *OperationUpdate) Mutation() *OperationMutation {
	return ou.mutation
}

// ClearLabels clears all "labels" edges to the Label entity.
func (ou *OperationUpdate) ClearLabels() *OperationUpdate {
	ou.mutation.ClearLabels()
	return ou
}

// RemoveLabelIDs removes the "labels" edge to Label entities by IDs.
func (ou *OperationUpdate) RemoveLabelIDs(ids ...int) *OperationUpdate {
	ou.mutation.RemoveLabelIDs(ids...)
	return ou
}

// RemoveLabels removes "labels" edges to Label entities.
func (ou *OperationUpdate) RemoveLabels(l ...*Label) *OperationUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ou.RemoveLabelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OperationUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OperationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OperationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OperationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OperationUpdate) defaults() {
	if _, ok := ou.mutation.UpdateTime(); !ok {
		v := operation.UpdateDefaultUpdateTime()
		ou.mutation.SetUpdateTime(v)
	}
}

func (ou *OperationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operation.Table, operation.Columns, sqlgraph.NewFieldSpec(operation.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdateTime(); ok {
		_spec.SetField(operation.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.Detail(); ok {
		_spec.SetField(operation.FieldDetail, field.TypeBytes, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(operation.FieldStatus, field.TypeBytes, value)
	}
	if value, ok := ou.mutation.IsDone(); ok {
		_spec.SetField(operation.FieldIsDone, field.TypeBool, value)
	}
	if ou.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   operation.LabelsTable,
			Columns: operation.LabelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedLabelsIDs(); len(nodes) > 0 && !ou.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   operation.LabelsTable,
			Columns: operation.LabelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.LabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   operation.LabelsTable,
			Columns: operation.LabelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OperationUpdateOne is the builder for updating a single Operation entity.
type OperationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperationMutation
}

// SetUpdateTime sets the "update_time" field.
func (ouo *OperationUpdateOne) SetUpdateTime(t time.Time) *OperationUpdateOne {
	ouo.mutation.SetUpdateTime(t)
	return ouo
}

// SetDetail sets the "detail" field.
func (ouo *OperationUpdateOne) SetDetail(b []byte) *OperationUpdateOne {
	ouo.mutation.SetDetail(b)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OperationUpdateOne) SetStatus(b []byte) *OperationUpdateOne {
	ouo.mutation.SetStatus(b)
	return ouo
}

// SetIsDone sets the "is_done" field.
func (ouo *OperationUpdateOne) SetIsDone(b bool) *OperationUpdateOne {
	ouo.mutation.SetIsDone(b)
	return ouo
}

// SetNillableIsDone sets the "is_done" field if the given value is not nil.
func (ouo *OperationUpdateOne) SetNillableIsDone(b *bool) *OperationUpdateOne {
	if b != nil {
		ouo.SetIsDone(*b)
	}
	return ouo
}

// AddLabelIDs adds the "labels" edge to the Label entity by IDs.
func (ouo *OperationUpdateOne) AddLabelIDs(ids ...int) *OperationUpdateOne {
	ouo.mutation.AddLabelIDs(ids...)
	return ouo
}

// AddLabels adds the "labels" edges to the Label entity.
func (ouo *OperationUpdateOne) AddLabels(l ...*Label) *OperationUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ouo.AddLabelIDs(ids...)
}

// Mutation returns the OperationMutation object of the builder.
func (ouo *OperationUpdateOne) Mutation() *OperationMutation {
	return ouo.mutation
}

// ClearLabels clears all "labels" edges to the Label entity.
func (ouo *OperationUpdateOne) ClearLabels() *OperationUpdateOne {
	ouo.mutation.ClearLabels()
	return ouo
}

// RemoveLabelIDs removes the "labels" edge to Label entities by IDs.
func (ouo *OperationUpdateOne) RemoveLabelIDs(ids ...int) *OperationUpdateOne {
	ouo.mutation.RemoveLabelIDs(ids...)
	return ouo
}

// RemoveLabels removes "labels" edges to Label entities.
func (ouo *OperationUpdateOne) RemoveLabels(l ...*Label) *OperationUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ouo.RemoveLabelIDs(ids...)
}

// Where appends a list predicates to the OperationUpdate builder.
func (ouo *OperationUpdateOne) Where(ps ...predicate.Operation) *OperationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OperationUpdateOne) Select(field string, fields ...string) *OperationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Operation entity.
func (ouo *OperationUpdateOne) Save(ctx context.Context) (*Operation, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OperationUpdateOne) SaveX(ctx context.Context) *Operation {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OperationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OperationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OperationUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdateTime(); !ok {
		v := operation.UpdateDefaultUpdateTime()
		ouo.mutation.SetUpdateTime(v)
	}
}

func (ouo *OperationUpdateOne) sqlSave(ctx context.Context) (_node *Operation, err error) {
	_spec := sqlgraph.NewUpdateSpec(operation.Table, operation.Columns, sqlgraph.NewFieldSpec(operation.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Operation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operation.FieldID)
		for _, f := range fields {
			if !operation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdateTime(); ok {
		_spec.SetField(operation.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.Detail(); ok {
		_spec.SetField(operation.FieldDetail, field.TypeBytes, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(operation.FieldStatus, field.TypeBytes, value)
	}
	if value, ok := ouo.mutation.IsDone(); ok {
		_spec.SetField(operation.FieldIsDone, field.TypeBool, value)
	}
	if ouo.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   operation.LabelsTable,
			Columns: operation.LabelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedLabelsIDs(); len(nodes) > 0 && !ouo.mutation.LabelsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   operation.LabelsTable,
			Columns: operation.LabelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.LabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   operation.LabelsTable,
			Columns: operation.LabelsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(label.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Operation{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
