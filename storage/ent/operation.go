// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/vgough/sequin/storage/ent/operation"
)

// Operation is the model entity for the Operation schema.
type Operation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// RequestID holds the value of the "request_id" field.
	RequestID string `json:"request_id,omitempty"`
	// Shard holds the value of the "shard" field.
	Shard int64 `json:"shard,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail []byte `json:"detail,omitempty"`
	// NextCheckAt holds the value of the "next_check_at" field.
	NextCheckAt time.Time `json:"next_check_at,omitempty"`
	// State holds the value of the "state" field.
	State []byte `json:"state,omitempty"`
	// Result holds the value of the "result" field.
	Result []byte `json:"result,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt time.Time `json:"finished_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OperationQuery when eager-loading is set.
	Edges        OperationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OperationEdges holds the relations/edges for other nodes in the graph.
type OperationEdges struct {
	// Labels holds the value of the labels edge.
	Labels []*Label `json:"labels,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LabelsOrErr returns the Labels value or an error if the edge
// was not loaded in eager-loading.
func (e OperationEdges) LabelsOrErr() ([]*Label, error) {
	if e.loadedTypes[0] {
		return e.Labels, nil
	}
	return nil, &NotLoadedError{edge: "labels"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operation.FieldDetail, operation.FieldState, operation.FieldResult:
			values[i] = new([]byte)
		case operation.FieldID, operation.FieldShard:
			values[i] = new(sql.NullInt64)
		case operation.FieldRequestID:
			values[i] = new(sql.NullString)
		case operation.FieldCreateTime, operation.FieldUpdateTime, operation.FieldNextCheckAt, operation.FieldStartedAt, operation.FieldFinishedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operation fields.
func (o *Operation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case operation.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case operation.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		case operation.FieldRequestID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id", values[i])
			} else if value.Valid {
				o.RequestID = value.String
			}
		case operation.FieldShard:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shard", values[i])
			} else if value.Valid {
				o.Shard = value.Int64
			}
		case operation.FieldDetail:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value != nil {
				o.Detail = *value
			}
		case operation.FieldNextCheckAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_check_at", values[i])
			} else if value.Valid {
				o.NextCheckAt = value.Time
			}
		case operation.FieldState:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value != nil {
				o.State = *value
			}
		case operation.FieldResult:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value != nil {
				o.Result = *value
			}
		case operation.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				o.StartedAt = value.Time
			}
		case operation.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				o.FinishedAt = value.Time
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Operation.
// This includes values selected through modifiers, order, etc.
func (o *Operation) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryLabels queries the "labels" edge of the Operation entity.
func (o *Operation) QueryLabels() *LabelQuery {
	return NewOperationClient(o.config).QueryLabels(o)
}

// Update returns a builder for updating this Operation.
// Note that you need to call Operation.Unwrap() before calling this method if this Operation
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operation) Update() *OperationUpdateOne {
	return NewOperationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Operation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Operation) Unwrap() *Operation {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operation is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operation) String() string {
	var builder strings.Builder
	builder.WriteString("Operation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("request_id=")
	builder.WriteString(o.RequestID)
	builder.WriteString(", ")
	builder.WriteString("shard=")
	builder.WriteString(fmt.Sprintf("%v", o.Shard))
	builder.WriteString(", ")
	builder.WriteString("detail=")
	builder.WriteString(fmt.Sprintf("%v", o.Detail))
	builder.WriteString(", ")
	builder.WriteString("next_check_at=")
	builder.WriteString(o.NextCheckAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", o.State))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", o.Result))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(o.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("finished_at=")
	builder.WriteString(o.FinishedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Operations is a parsable slice of Operation.
type Operations []*Operation
