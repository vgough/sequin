// Code generated by ent, DO NOT EDIT.

package operation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vgough/sequin/storage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Operation {
	return predicate.Operation(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Operation {
	return predicate.Operation(sql.FieldContainsFold(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldUpdateTime, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldDetail, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldStatus, v))
}

// IsDone applies equality check predicate on the "is_done" field. It's identical to IsDoneEQ.
func IsDone(v bool) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldIsDone, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldUpdateTime, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldDetail, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldStatus, v))
}

// IsDoneEQ applies the EQ predicate on the "is_done" field.
func IsDoneEQ(v bool) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldIsDone, v))
}

// IsDoneNEQ applies the NEQ predicate on the "is_done" field.
func IsDoneNEQ(v bool) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldIsDone, v))
}

// HasLabels applies the HasEdge predicate on the "labels" edge.
func HasLabels() predicate.Operation {
	return predicate.Operation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LabelsTable, LabelsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLabelsWith applies the HasEdge predicate on the "labels" edge with a given conditions (other predicates).
func HasLabelsWith(preds ...predicate.Label) predicate.Operation {
	return predicate.Operation(func(s *sql.Selector) {
		step := newLabelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Operation) predicate.Operation {
	return predicate.Operation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Operation) predicate.Operation {
	return predicate.Operation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Operation) predicate.Operation {
	return predicate.Operation(sql.NotPredicates(p))
}
