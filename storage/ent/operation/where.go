// Code generated by ent, DO NOT EDIT.

package operation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vgough/sequin/storage/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldID, id))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldUpdateTime, v))
}

// RequestID applies equality check predicate on the "request_id" field. It's identical to RequestIDEQ.
func RequestID(v string) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldRequestID, v))
}

// Shard applies equality check predicate on the "shard" field. It's identical to ShardEQ.
func Shard(v int64) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldShard, v))
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldDetail, v))
}

// NextCheckAt applies equality check predicate on the "next_check_at" field. It's identical to NextCheckAtEQ.
func NextCheckAt(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldNextCheckAt, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldState, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldResult, v))
}

// Submitter applies equality check predicate on the "submitter" field. It's identical to SubmitterEQ.
func Submitter(v string) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldSubmitter, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldFinishedAt, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldUpdateTime, v))
}

// RequestIDEQ applies the EQ predicate on the "request_id" field.
func RequestIDEQ(v string) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldRequestID, v))
}

// RequestIDNEQ applies the NEQ predicate on the "request_id" field.
func RequestIDNEQ(v string) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldRequestID, v))
}

// RequestIDIn applies the In predicate on the "request_id" field.
func RequestIDIn(vs ...string) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldRequestID, vs...))
}

// RequestIDNotIn applies the NotIn predicate on the "request_id" field.
func RequestIDNotIn(vs ...string) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldRequestID, vs...))
}

// RequestIDGT applies the GT predicate on the "request_id" field.
func RequestIDGT(v string) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldRequestID, v))
}

// RequestIDGTE applies the GTE predicate on the "request_id" field.
func RequestIDGTE(v string) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldRequestID, v))
}

// RequestIDLT applies the LT predicate on the "request_id" field.
func RequestIDLT(v string) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldRequestID, v))
}

// RequestIDLTE applies the LTE predicate on the "request_id" field.
func RequestIDLTE(v string) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldRequestID, v))
}

// RequestIDContains applies the Contains predicate on the "request_id" field.
func RequestIDContains(v string) predicate.Operation {
	return predicate.Operation(sql.FieldContains(FieldRequestID, v))
}

// RequestIDHasPrefix applies the HasPrefix predicate on the "request_id" field.
func RequestIDHasPrefix(v string) predicate.Operation {
	return predicate.Operation(sql.FieldHasPrefix(FieldRequestID, v))
}

// RequestIDHasSuffix applies the HasSuffix predicate on the "request_id" field.
func RequestIDHasSuffix(v string) predicate.Operation {
	return predicate.Operation(sql.FieldHasSuffix(FieldRequestID, v))
}

// RequestIDEqualFold applies the EqualFold predicate on the "request_id" field.
func RequestIDEqualFold(v string) predicate.Operation {
	return predicate.Operation(sql.FieldEqualFold(FieldRequestID, v))
}

// RequestIDContainsFold applies the ContainsFold predicate on the "request_id" field.
func RequestIDContainsFold(v string) predicate.Operation {
	return predicate.Operation(sql.FieldContainsFold(FieldRequestID, v))
}

// ShardEQ applies the EQ predicate on the "shard" field.
func ShardEQ(v int64) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldShard, v))
}

// ShardNEQ applies the NEQ predicate on the "shard" field.
func ShardNEQ(v int64) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldShard, v))
}

// ShardIn applies the In predicate on the "shard" field.
func ShardIn(vs ...int64) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldShard, vs...))
}

// ShardNotIn applies the NotIn predicate on the "shard" field.
func ShardNotIn(vs ...int64) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldShard, vs...))
}

// ShardGT applies the GT predicate on the "shard" field.
func ShardGT(v int64) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldShard, v))
}

// ShardGTE applies the GTE predicate on the "shard" field.
func ShardGTE(v int64) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldShard, v))
}

// ShardLT applies the LT predicate on the "shard" field.
func ShardLT(v int64) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldShard, v))
}

// ShardLTE applies the LTE predicate on the "shard" field.
func ShardLTE(v int64) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldShard, v))
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldDetail, v))
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldDetail, v))
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldDetail, vs...))
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldDetail, vs...))
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldDetail, v))
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldDetail, v))
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldDetail, v))
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldDetail, v))
}

// NextCheckAtEQ applies the EQ predicate on the "next_check_at" field.
func NextCheckAtEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldNextCheckAt, v))
}

// NextCheckAtNEQ applies the NEQ predicate on the "next_check_at" field.
func NextCheckAtNEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldNextCheckAt, v))
}

// NextCheckAtIn applies the In predicate on the "next_check_at" field.
func NextCheckAtIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldNextCheckAt, vs...))
}

// NextCheckAtNotIn applies the NotIn predicate on the "next_check_at" field.
func NextCheckAtNotIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldNextCheckAt, vs...))
}

// NextCheckAtGT applies the GT predicate on the "next_check_at" field.
func NextCheckAtGT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldNextCheckAt, v))
}

// NextCheckAtGTE applies the GTE predicate on the "next_check_at" field.
func NextCheckAtGTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldNextCheckAt, v))
}

// NextCheckAtLT applies the LT predicate on the "next_check_at" field.
func NextCheckAtLT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldNextCheckAt, v))
}

// NextCheckAtLTE applies the LTE predicate on the "next_check_at" field.
func NextCheckAtLTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldNextCheckAt, v))
}

// NextCheckAtIsNil applies the IsNil predicate on the "next_check_at" field.
func NextCheckAtIsNil() predicate.Operation {
	return predicate.Operation(sql.FieldIsNull(FieldNextCheckAt))
}

// NextCheckAtNotNil applies the NotNil predicate on the "next_check_at" field.
func NextCheckAtNotNil() predicate.Operation {
	return predicate.Operation(sql.FieldNotNull(FieldNextCheckAt))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldState, v))
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Operation {
	return predicate.Operation(sql.FieldIsNull(FieldState))
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Operation {
	return predicate.Operation(sql.FieldNotNull(FieldState))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...[]byte) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v []byte) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldResult, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.Operation {
	return predicate.Operation(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.Operation {
	return predicate.Operation(sql.FieldNotNull(FieldResult))
}

// SubmitterEQ applies the EQ predicate on the "submitter" field.
func SubmitterEQ(v string) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldSubmitter, v))
}

// SubmitterNEQ applies the NEQ predicate on the "submitter" field.
func SubmitterNEQ(v string) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldSubmitter, v))
}

// SubmitterIn applies the In predicate on the "submitter" field.
func SubmitterIn(vs ...string) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldSubmitter, vs...))
}

// SubmitterNotIn applies the NotIn predicate on the "submitter" field.
func SubmitterNotIn(vs ...string) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldSubmitter, vs...))
}

// SubmitterGT applies the GT predicate on the "submitter" field.
func SubmitterGT(v string) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldSubmitter, v))
}

// SubmitterGTE applies the GTE predicate on the "submitter" field.
func SubmitterGTE(v string) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldSubmitter, v))
}

// SubmitterLT applies the LT predicate on the "submitter" field.
func SubmitterLT(v string) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldSubmitter, v))
}

// SubmitterLTE applies the LTE predicate on the "submitter" field.
func SubmitterLTE(v string) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldSubmitter, v))
}

// SubmitterContains applies the Contains predicate on the "submitter" field.
func SubmitterContains(v string) predicate.Operation {
	return predicate.Operation(sql.FieldContains(FieldSubmitter, v))
}

// SubmitterHasPrefix applies the HasPrefix predicate on the "submitter" field.
func SubmitterHasPrefix(v string) predicate.Operation {
	return predicate.Operation(sql.FieldHasPrefix(FieldSubmitter, v))
}

// SubmitterHasSuffix applies the HasSuffix predicate on the "submitter" field.
func SubmitterHasSuffix(v string) predicate.Operation {
	return predicate.Operation(sql.FieldHasSuffix(FieldSubmitter, v))
}

// SubmitterEqualFold applies the EqualFold predicate on the "submitter" field.
func SubmitterEqualFold(v string) predicate.Operation {
	return predicate.Operation(sql.FieldEqualFold(FieldSubmitter, v))
}

// SubmitterContainsFold applies the ContainsFold predicate on the "submitter" field.
func SubmitterContainsFold(v string) predicate.Operation {
	return predicate.Operation(sql.FieldContainsFold(FieldSubmitter, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Operation {
	return predicate.Operation(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Operation {
	return predicate.Operation(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.Operation {
	return predicate.Operation(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.Operation {
	return predicate.Operation(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.Operation {
	return predicate.Operation(sql.FieldNotNull(FieldFinishedAt))
}

// HasLabels applies the HasEdge predicate on the "labels" edge.
func HasLabels() predicate.Operation {
	return predicate.Operation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, LabelsTable, LabelsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLabelsWith applies the HasEdge predicate on the "labels" edge with a given conditions (other predicates).
func HasLabelsWith(preds ...predicate.Label) predicate.Operation {
	return predicate.Operation(func(s *sql.Selector) {
		step := newLabelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Operation) predicate.Operation {
	return predicate.Operation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Operation) predicate.Operation {
	return predicate.Operation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Operation) predicate.Operation {
	return predicate.Operation(sql.NotPredicates(p))
}
