// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sequin/v1/sequin.proto

package sequinv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ExecRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecRequestMultiError, or
// nil if none found.
func (m *ExecRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if all {
		switch v := interface{}(m.GetOperation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecRequestValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecRequestValidationError{
					field:  "Operation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOperation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecRequestValidationError{
				field:  "Operation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecRequestValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecRequestValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecRequestMultiError(errors)
	}

	return nil
}

// ExecRequestMultiError is an error wrapping multiple validation errors
// returned by ExecRequest.ValidateAll() if the designated constraints aren't met.
type ExecRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecRequestMultiError) AllErrors() []error { return m }

// ExecRequestValidationError is the validation error returned by
// ExecRequest.Validate if the designated constraints aren't met.
type ExecRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecRequestValidationError) ErrorName() string { return "ExecRequestValidationError" }

// Error satisfies the builtin error interface
func (e ExecRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecRequestValidationError{}

// Validate checks the field values on FuncOperation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FuncOperation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FuncOperation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FuncOperationMultiError, or
// nil if none found.
func (m *FuncOperation) ValidateAll() error {
	return m.validate(true)
}

func (m *FuncOperation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FuncOperationValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FuncOperationValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FuncOperationValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FuncOperationMultiError(errors)
	}

	return nil
}

// FuncOperationMultiError is an error wrapping multiple validation errors
// returned by FuncOperation.ValidateAll() if the designated constraints
// aren't met.
type FuncOperationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FuncOperationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FuncOperationMultiError) AllErrors() []error { return m }

// FuncOperationValidationError is the validation error returned by
// FuncOperation.Validate if the designated constraints aren't met.
type FuncOperationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FuncOperationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FuncOperationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FuncOperationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FuncOperationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FuncOperationValidationError) ErrorName() string { return "FuncOperationValidationError" }

// Error satisfies the builtin error interface
func (e FuncOperationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFuncOperation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FuncOperationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FuncOperationValidationError{}

// Validate checks the field values on ExecResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecResponseMultiError, or
// nil if none found.
func (m *ExecResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExecResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExecResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExecResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecResponseValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecResponseMultiError(errors)
	}

	return nil
}

// ExecResponseMultiError is an error wrapping multiple validation errors
// returned by ExecResponse.ValidateAll() if the designated constraints aren't met.
type ExecResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecResponseMultiError) AllErrors() []error { return m }

// ExecResponseValidationError is the validation error returned by
// ExecResponse.Validate if the designated constraints aren't met.
type ExecResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecResponseValidationError) ErrorName() string { return "ExecResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExecResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecResponseValidationError{}

// Validate checks the field values on RequestMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RequestMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RequestMetadata with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RequestMetadataMultiError, or nil if none found.
func (m *RequestMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RequestMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientVersion

	// no validation rules for Labels

	if len(errors) > 0 {
		return RequestMetadataMultiError(errors)
	}

	return nil
}

// RequestMetadataMultiError is an error wrapping multiple validation errors
// returned by RequestMetadata.ValidateAll() if the designated constraints
// aren't met.
type RequestMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RequestMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RequestMetadataMultiError) AllErrors() []error { return m }

// RequestMetadataValidationError is the validation error returned by
// RequestMetadata.Validate if the designated constraints aren't met.
type RequestMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestMetadataValidationError) ErrorName() string { return "RequestMetadataValidationError" }

// Error satisfies the builtin error interface
func (e RequestMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequestMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestMetadataValidationError{}

// Validate checks the field values on RunMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RunMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RunMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RunMetadataMultiError, or
// nil if none found.
func (m *RunMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *RunMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Labels

	// no validation rules for Submitter

	if all {
		switch v := interface{}(m.GetSubmittedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunMetadataValidationError{
					field:  "SubmittedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunMetadataValidationError{
					field:  "SubmittedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmittedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunMetadataValidationError{
				field:  "SubmittedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunMetadataValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunMetadataValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunMetadataValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFinishedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunMetadataValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunMetadataValidationError{
					field:  "FinishedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFinishedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunMetadataValidationError{
				field:  "FinishedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ServerVersion

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RunMetadataValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RunMetadataValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RunMetadataValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RunMetadataMultiError(errors)
	}

	return nil
}

// RunMetadataMultiError is an error wrapping multiple validation errors
// returned by RunMetadata.ValidateAll() if the designated constraints aren't met.
type RunMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RunMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RunMetadataMultiError) AllErrors() []error { return m }

// RunMetadataValidationError is the validation error returned by
// RunMetadata.Validate if the designated constraints aren't met.
type RunMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RunMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RunMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RunMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RunMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RunMetadataValidationError) ErrorName() string { return "RunMetadataValidationError" }

// Error satisfies the builtin error interface
func (e RunMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRunMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RunMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RunMetadataValidationError{}
