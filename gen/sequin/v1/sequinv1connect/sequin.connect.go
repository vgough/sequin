// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sequin/v1/sequin.proto

package sequinv1connect

import (
	longrunningpb "cloud.google.com/go/longrunning/autogen/longrunningpb"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/vgough/sequin/gen/sequin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SequinServiceName is the fully-qualified name of the SequinService service.
	SequinServiceName = "arg0net.sequin.v1.SequinService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SequinServiceExecProcedure is the fully-qualified name of the SequinService's Exec RPC.
	SequinServiceExecProcedure = "/arg0net.sequin.v1.SequinService/Exec"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	sequinServiceServiceDescriptor    = v1.File_sequin_v1_sequin_proto.Services().ByName("SequinService")
	sequinServiceExecMethodDescriptor = sequinServiceServiceDescriptor.Methods().ByName("Exec")
)

// SequinServiceClient is a client for the arg0net.sequin.v1.SequinService service.
type SequinServiceClient interface {
	Exec(context.Context, *connect.Request[v1.ExecRequest]) (*connect.ServerStreamForClient[longrunningpb.Operation], error)
}

// NewSequinServiceClient constructs a client for the arg0net.sequin.v1.SequinService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSequinServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SequinServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &sequinServiceClient{
		exec: connect.NewClient[v1.ExecRequest, longrunningpb.Operation](
			httpClient,
			baseURL+SequinServiceExecProcedure,
			connect.WithSchema(sequinServiceExecMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// sequinServiceClient implements SequinServiceClient.
type sequinServiceClient struct {
	exec *connect.Client[v1.ExecRequest, longrunningpb.Operation]
}

// Exec calls arg0net.sequin.v1.SequinService.Exec.
func (c *sequinServiceClient) Exec(ctx context.Context, req *connect.Request[v1.ExecRequest]) (*connect.ServerStreamForClient[longrunningpb.Operation], error) {
	return c.exec.CallServerStream(ctx, req)
}

// SequinServiceHandler is an implementation of the arg0net.sequin.v1.SequinService service.
type SequinServiceHandler interface {
	Exec(context.Context, *connect.Request[v1.ExecRequest], *connect.ServerStream[longrunningpb.Operation]) error
}

// NewSequinServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSequinServiceHandler(svc SequinServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sequinServiceExecHandler := connect.NewServerStreamHandler(
		SequinServiceExecProcedure,
		svc.Exec,
		connect.WithSchema(sequinServiceExecMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/arg0net.sequin.v1.SequinService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SequinServiceExecProcedure:
			sequinServiceExecHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSequinServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSequinServiceHandler struct{}

func (UnimplementedSequinServiceHandler) Exec(context.Context, *connect.Request[v1.ExecRequest], *connect.ServerStream[longrunningpb.Operation]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("arg0net.sequin.v1.SequinService.Exec is not implemented"))
}
