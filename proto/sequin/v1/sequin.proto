syntax = "proto3";

package arg0net.sequin.v1;

option go_package = "sequin";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "google/longrunning/operations.proto";

import "buf/validate/validate.proto";

service SequinService {
    // Start begins a new operation.
    rpc Start (StartRequest) returns (StartResponse);
    // Get returns the current state of an operation.
    rpc Get (GetRequest) returns (GetResponse);

    // Exec starts an operation and always streams back operation updates.
    // This is preferred over Start/Get for long-running operations.
    rpc Exec (ExecRequest) returns (stream google.longrunning.Operation) {
        option (google.longrunning.operation_info) = {
            response_type: "ExecResponse"
            metadata_type: "RunMetadata"
        };
    }

    // Watch streams back operation updates but will not start an operation.
    // rpc Watch (WatchRequest) returns (stream google.longrunning.Operation) {
    //     option (google.longrunning.operation_info) = {
    //         response_type: "WatchResponse"
    //         metadata_type: "RunMetadata"
    //     };
    // }

    // Cancel cancels an ongoing operation.
    // Note that this may not be possible for all operations.
    // rpc Cancel (CancelRequest) returns (CancelResponse);
}

message ExecRequest {
    Operation op = 1;
}

message StartRequest {
    Operation op = 1;
}

message Operation {
    string request_id = 1 [(buf.validate.field).string = {
        max_len: 80,
    }];
    google.protobuf.Any detail = 2;
}

message OperationResult {
    int64 update_id = 1;
    repeated google.protobuf.Any results = 2;
}

message OperationState {
    int64 update_id = 1;
    map<string, google.protobuf.Any> state = 2;
    bool done = 3;
}

message StartResponse {
}

message GetRequest {
    string request_id = 1 [(buf.validate.field).string = {
        max_len: 80,
    }];
    // LastUpdateId is the last update ID received by the client from a GetResponse.
    // If provided, the server will block until there is a new update.
    // This changes the behavior of Get to be a long-polling operation.
    int64 last_update_id = 2;
    OperationState state = 3;
}

message GetResponse {
    OperationResult result = 1;
}

message FuncOperation {
    string name = 1 [(buf.validate.field).string.min_len = 1];
    repeated bytes args = 2;
}

message ExecResponse {
    OperationResult result = 1;
}

message RunMetadata {
    google.protobuf.Timestamp submitted_at = 1;
    google.protobuf.Timestamp started_at = 2;
    google.protobuf.Timestamp finished_at = 3;
    string server_version = 4;
}
